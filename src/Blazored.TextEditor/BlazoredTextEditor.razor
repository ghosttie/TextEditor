@inject IJSRuntime JSRuntime

<div @ref="@ToolBar">
	@ToolbarContent
</div>
<div @ref="@QuillElement">
	@EditorContent
</div>

@code {
	[Parameter]
	public RenderFragment EditorContent { get; set; }

	[Parameter]
	public RenderFragment ToolbarContent { get; set; }

	[Parameter]
	public bool ReadOnly { get; set; } = false;

	[Parameter]
	public string Placeholder { get; set; } = "Compose an epic...";

	[Parameter]
	public string Theme { get; set; } = "snow";

	[Parameter]
	public string DebugLevel { get; set; } = "info";

	[Parameter]
	public bool EnableHistoryModule { get; set; } = true;

	[Parameter]
	public int HistoryDelay { get; set; } = 1000;

	[Parameter]
	public int HistoryMaxStack { get; set; } = 100;

	[Parameter]
	public bool HistoryUserOnly { get; set; } = false;

	[Parameter]
	public bool EnableSyntaxModule { get; set; } = false;

	[Parameter]
	public bool EnableTooltips { get; set; } = false;

	[Parameter]
	public EventCallback<TextChangeEventArgs> OnTextChange { get; set; }

	[Parameter]
	public EventCallback<string> OnDelta { get; set; }

	[Parameter]
	public int DeltaTime { get; set; } = 1000;

	private ElementReference QuillElement;
	private ElementReference ToolBar;

	protected override async Task OnAfterRenderAsync(bool firstRender) {
		if (firstRender) {
			DotNetObjectReference<BlazoredTextEditor> reference = null;
			if (OnTextChange.HasDelegate || OnDelta.HasDelegate) {
				reference = DotNetObjectReference.Create(this);
			}

			await Interop.CreateQuill(
				JSRuntime,
				QuillElement,
				ToolBar,
				ReadOnly,
				Placeholder,
				Theme,
				DebugLevel,
				EnableHistoryModule,
				HistoryDelay,
				HistoryMaxStack,
				HistoryUserOnly,
				EnableSyntaxModule,
				EnableTooltips,
				reference,
				OnTextChange.HasDelegate ? nameof(OnTextChangeCallback) : null,
				OnDelta.HasDelegate ? nameof(OnDeltaCallback) : null,
				DeltaTime
			);
		}
	}

	public async Task<string> GetText() {
		return await Interop.GetText(JSRuntime, QuillElement);
	}

	public async Task<string> GetHTML() {
		return await Interop.GetHTML(JSRuntime, QuillElement);
	}

	public async Task<string> GetContent() {
		return await Interop.GetContent(JSRuntime, QuillElement);
	}

	public async Task LoadContent(string Content) {
		var QuillDelta = await Interop.LoadQuillContent(JSRuntime, QuillElement, Content);
	}

	public async Task LoadHTMLContent(string quillHTMLContent) {
		var QuillDelta = await Interop.LoadQuillHTMLContent(JSRuntime, QuillElement, quillHTMLContent);
	}

	public async Task InsertImage(string ImageURL) {
		var QuillDelta = await Interop.InsertQuillImage(JSRuntime, QuillElement, ImageURL);
	}

	public async Task EnableEditor(bool mode) {
		var QuillDelta = await Interop.EnableQuillEditor(JSRuntime, QuillElement, mode);
	}

	[JSInvokable]
	public async Task OnTextChangeCallback(TextChangeEventArgs args) {
		await OnTextChange.InvokeAsync(args);
	}

	[JSInvokable]
	public async Task OnDeltaCallback(string delta) {
		await OnDelta.InvokeAsync(delta);
	}
}